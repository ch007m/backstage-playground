#!/bin/bash

#
# Render app-config.local.yaml from template
#

# Fallback to the second argument if the first is empty
setf() {
  if [ -z "${!1}" ]; then
    export $1="$2"
  fi
}

usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -t, --title <title>                   The title of the Backstage instance"
  echo "  -o, --org <org>                       The organization name"
  echo "  -u, --github-user <github-user>       The GitHub user"
  echo "      --github-token <github-token>     The GitHub token"
  echo "      --github-client-id <client-id>    The GitHub client id"
  echo "      --github-client-secret <secret>   The GitHub client secret"
  echo "      --gitea-host <host>               The Gitea Host"
  echo "      --gitea-user <gitea-user>         The Gitea username"
  echo "      --gitea-password <gitea-password> The Gitea username"
  exit 1
}

# Set defaults
setf "BACKSTAGE_TITLE" "My Backstage"
setf "BACKSTAGE_ORG" "q-shift"
setf "BACKSTAGE_GITHUB_USER" "q-shift"
setf "GITHUB_PERSONAL_ACCESS_TOKEN" ""
setf "BACKSTAGE_TEAM_NAME" "team"
setf "BACKSTAGE_APP_BASE_URL" "http://localhost:3000"
setf "BACKSTAGE_BACKEND_BASE_URL" "http://localhost:7007"
setf "BACKSTAGE_AUTH_SECRET" `node -p 'require("crypto").randomBytes(24).toString("base64")'`

#
# Optionally override the default values (above) with command line arguments:
# -t: Title
# -o: Organization
# --github-user: GitHub User
# --github-token: GitHub Token
# --github-client-id: GitHub Client ID
# --github-client-secret: GitHub Client Secret
#
while [[ $# -gt 0 ]]; do
  echo "Processing $1"
  case $1 in
    -t|--title)
      BACKSTAGE_TITLE=$2
      shift 2
      ;;
    -o|--org)
      BACKSTAGE_ORG=$2
      shift 2
      ;;
    -u|--github-user)
      BACKSTAGE_GITHUB_USER=$2
      shift 2
      ;;
    --github-token)
      GITHUB_PERSONAL_ACCESS_TOKEN=$2
      shift 2
      ;;
    --github-client-id)
      BACKSTAGE_GITHUB_CLIENT_ID=$2
      shift 2
      ;;
    --github-client-secret)
      BACKSTAGE_GITHUB_CLIENT_SECRET=$2
      shift 2
      ;;
    --gitea-url)
      GITEA_HOST=$2
      shift 2
      ;;
    --gitea-user)
      GITEA_USERNAME=$2
      shift 2
      ;;
      --gitea-password)
      GITEA_PASSWORD=$2
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      usage
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

# Kubernetes
setf KUBERNETES_CLUSTER_NAME "default"
setf KUBERNETES_CONFIG_PATH "$HOME/.kube/config"
setf KUBERNETES_API_URL `kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'`
setf KUBERNETES_USER `kubectl config view --minify -o jsonpath='{.users[0].name}'`
setf KUBERNETES_TOKEN `cat $KUBERNETES_CONFIG_PATH | grep -A 2 "name: $KUBERNETES_USER" | grep token | awk '{print $2}'`


# Argo CD
setf ARGOCD_ADMIN_USER admin
setf ARGOCD_ADMIN_PASSWORD `kubectl get secrets -n openshift-gitops argocd-cluster -o yaml | grep password | awk '{print $2}' | base64 -d`
setf ARGOCD_COOKIE `kubectl get secrets -n openshift-gitops argocd-secret -o yaml | grep clientSecret | awk '{print $2}' | base64 -d`
setf ARGOCD_SERVER "https://openshift-gitops-server-openshift-gitops.apps.qshift.snowdrop.dev"

# Github

if [ -z "$GITHUB_PERSONAL_ACCESS_TOKEN" ]; then
    if command -v gh &> /dev/null; then
        setf GITHUB_PERSONAL_ACCESS_TOKEN `gh auth status -t | grep Token: | awk -F": " '{print $2}'`
    else
        echo "GITHUB_PERSONAL_ACCESS_TOKEN is not defined and can't be read from 'gh' command. Aborting"
        exit 1
    fi
fi

# Gitea
setf GITEA_HOST "localhost"
setf GITEA_USERNAME "admin"
setf GITEA_PASSWORD "admin"

echo "BACKSTAGE_TITLE=$BACKSTAGE_TITLE"
echo "BACKSTAGE_ORG=$BACKSTAGE_ORG"
echo "BACKSTAGE_GITHUB_USER=$BACKSTAGE_GITHUB_USER"
echo "GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_PERSONAL_ACCESS_TOKEN"
echo "KUBERNETES_API_URL=$KUBERNETES_API_URL"
echo "KUBERNETES_USER=$KUBERNETES_USER"


envsubst < manifest/templates/app-config.qshift.tmpl > app-config.local.yaml
export NODE_TLS_REJECT_UNAUTHORIZED=0

# Run Backstage in Development Mode
yarn dev
